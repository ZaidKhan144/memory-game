{"version":3,"sources":["component/Intro.js","component/Header.js","component/Gif.js","component/Scoreboard.js","component/GifList.js","component/Main.js","App.js","index.js"],"names":["Intro","className","onClick","e","preventDefault","intro","document","querySelector","header","scoreboard","main","classList","add","remove","Header","Gif","props","src","url","alt","id","Scoreboard","current","best","GifList","gif","useState","currentScore","setCurrentScore","bestScore","setBestScore","clicked","setClicked","results","data","cardClick","indexOf","target","randomGifs","i","randomNumber","Math","floor","random","length","push","console","log","map","index","images","fixed_height","pickRandomGif","Main","setData","useEffect","fetch","then","response","json","responseData","catch","error","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"wLA8BeA,G,MA7BD,WAeV,OAEI,sBAAKC,UAAU,QAAf,UACA,8CACI,iEACA,8FACA,8KAEA,wBAAQC,QArBG,SAACC,GAChBA,EAAEC,iBACF,IAAMC,EAAQC,SAASC,cAAc,UAC/BC,EAASF,SAASC,cAAc,WAChCE,EAAaH,SAASC,cAAc,eACpCG,EAAOJ,SAASC,cAAc,SAEpCF,EAAMM,UAAUC,IAAI,QACpBJ,EAAOG,UAAUE,OAAO,QACxBJ,EAAWE,UAAUE,OAAO,QAC5BH,EAAKC,UAAUE,OAAO,SAWlB,+BCbGC,EAVA,WACX,OACI,8BACI,qBAAKb,UAAU,cAAf,SACI,+D,cCIDc,EARH,SAACC,GACT,OACA,oBAAIf,UAAU,WAAd,SACI,qBAAKgB,IAAKD,EAAME,IAAKC,IAAI,GAAGC,GAAIJ,EAAMI,GAAIlB,QAASc,EAAMd,aCUlDmB,EAZI,SAACL,GAEhB,OACI,qBAAKf,UAAU,kBAAf,SACI,sBAAKA,UAAU,SAAf,UACI,iDAAmB,+BAAOe,EAAMM,aAChC,8CAAgB,+BAAON,EAAMO,gBCsD9BC,EA1DE,SAACR,GAAW,IAOrBS,EAPoB,EAEgBC,mBAAS,GAFzB,mBAEjBC,EAFiB,KAEHC,EAFG,OAGUF,mBAAS,GAHnB,mBAGjBG,EAHiB,KAGNC,EAHM,OAIMJ,mBAAS,IAJf,mBAIjBK,EAJiB,KAIRC,EAJQ,KAMpBC,EAAUjB,EAAMkB,KAGdC,EAAY,SAAChC,GAEZ4B,EAAQK,QAAQjC,EAAEkC,OAAOjB,IAAM,GAE9BY,GAAW,SAAAD,GAAO,4BAAQA,GAAR,CAAiB5B,EAAEkC,OAAOjB,QAC5CQ,EAAgBD,EAAe,KAG5BA,EAAeE,GACdC,EAAaH,GAEjBC,EAAgB,GAChBI,GAAW,SAAAD,GAAO,MAAI,QAyB1B,OArBsB,WAGtB,IAFA,IAAIO,EAAa,GAETC,EAAE,EAAGA,EAAE,EAAGA,IAAI,CAClB,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWV,EAAQW,QACtDN,EAAWO,KAAKL,GAEpBM,QAAQC,IAAIT,GAEZb,EAAMa,EAAWU,KAAI,SAACL,EAAQM,GAAT,OACjB,cAAC,EAAD,CACI/C,QAASiC,EAETjB,IAAMe,EAAQU,GAAT,UAAqCV,EAAQU,GAAQO,OAAOC,aAAajC,KAAtD,aAExBE,GAAIuB,GADCM,MAKbG,GAGI,gCACA,cAAC,EAAD,CAAY9B,QAASK,EAAcJ,KAAMM,IACzC,qBAAK5B,UAAU,gBAAf,SACI,oBAAIA,UAAU,WAAd,SACKwB,UC5BN4B,EAvBF,WAAO,IAAD,EAES3B,mBAAS,IAFlB,mBAERQ,EAFQ,KAEFoB,EAFE,KAef,OAXAC,qBAAU,WACNC,MAAM,mFACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIN,EAAQM,EAAa1B,SAC1C2B,OAAM,SAAAC,GACHhB,QAAQC,IAAI,kCAAmCe,QAErD,IAKE,qBAAK7D,UAAU,YAAf,SACI,cAAC,EAAD,CAASiC,KAAMA,OCLZ6B,MAZf,WAEE,OACE,sBAAK9D,UAAU,KAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCJR+D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5D,SAAS6D,eAAe,W","file":"static/js/main.819319fe.chunk.js","sourcesContent":["\r\nconst Intro = () => {\r\n\r\n    const closeIntro = (e) => {\r\n        e.preventDefault()\r\n        const intro = document.querySelector('.intro')\r\n        const header = document.querySelector('.header')\r\n        const scoreboard = document.querySelector('.scoreboard')\r\n        const main = document.querySelector('.main')\r\n\r\n        intro.classList.add('hide')\r\n        header.classList.remove('hide')\r\n        scoreboard.classList.remove('hide')\r\n        main.classList.remove('hide')\r\n    }\r\n\r\n    return(\r\n    \r\n        <div className=\"intro\" >\r\n        <h1>How it works</h1>\r\n            <p>Welcome to the Memory GIFs Game!</p>\r\n            <p>This memory game will present you with random gifs on screen.</p> \r\n            <p>To gain points, select GIFs that are different from the previous ones you selected. \r\n            If you choose the same gif more than once, you will lose.</p>\r\n            <button onClick={closeIntro}>Ok, I got it</button>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Intro","\r\nconst Header = () => {\r\n    return(\r\n        <div>\r\n            <div className=\"header hide\">\r\n                <h1>Memory&nbsp; GIFs&nbsp; Game</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","\r\nconst Gif = (props) => {\r\n    return (\r\n    <li className=\"gif-wrap\">\r\n        <img src={props.url} alt=\"\" id={props.id} onClick={props.onClick}/>\r\n    </li>\r\n    )\r\n}\r\n\r\nexport default Gif;","// import React, {useState} from 'react'\r\n\r\nconst Scoreboard = (props) => {\r\n\r\n    return(\r\n        <div className=\"scoreboard hide\">\r\n            <div className=\"scores\">\r\n                <h3>Current Score: <span>{props.current}</span></h3>\r\n                <h3>Best Score: <span>{props.best}</span></h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard"," import { useState } from 'react'\r\nimport Gif from './Gif'\r\nimport Scoreboard from './Scoreboard'\r\n\r\n const GifList = (props) => {\r\n\r\n    const [currentScore, setCurrentScore] = useState(0)\r\n    const [bestScore, setBestScore] = useState(0)\r\n    const [clicked, setClicked] = useState([])\r\n\r\n    let results = props.data\r\n    let gif\r\n\r\n    const cardClick = (e) => {\r\n        //If Clicked with the unique ID\r\n        if(clicked.indexOf(e.target.id) < 0){\r\n            //that clicked is going to set in array with its ID\r\n            setClicked(clicked => [...clicked, e.target.id])\r\n            setCurrentScore(currentScore + 1)\r\n        } // If clicked on already exist ID\r\n        else {  // Check Score\r\n            if(currentScore > bestScore) {\r\n                setBestScore(currentScore)\r\n            }   // Reset current score\r\n            setCurrentScore(0)\r\n            setClicked(clicked => [])\r\n        }\r\n    }\r\n    \r\n        const pickRandomGif = () =>{\r\n        let randomGifs = []\r\n        // Getting random numbers from here\r\n        for(let i=0; i<6; i++){\r\n            let randomNumber = Math.floor(Math.random() * results.length)   \r\n            randomGifs.push(randomNumber)\r\n        }\r\n        console.log(randomGifs)\r\n\r\n        gif = randomGifs.map((random, index) => \r\n            <Gif \r\n                onClick={cardClick}\r\n                // Getting random GIFs \r\n                url={!results[random] ? 'Loading...' : `${results[random].images.fixed_height.url}`} \r\n                key={index} \r\n                id={random}\r\n            />\r\n        )\r\n    }\r\n        pickRandomGif()\r\n\r\n        return (\r\n            <div>\r\n            <Scoreboard current={currentScore} best={bestScore}/>\r\n            <div className=\"gif-container\">\r\n                <ul className=\"gif-list\">\r\n                    {gif}\r\n                </ul>\r\n            </div> \r\n            </div>\r\n        )\r\n}\r\n\r\nexport default GifList","import React, {useState, useEffect} from 'react'\r\nimport GifList from './GifList'\r\n\r\n\r\nconst Main = () => {\r\n\r\n    const [data, setData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch('https://api.giphy.com/v1/gifs/trending?api_key=aIINKf0Pxb8MDhC2QPzTLbgvUXN6Uz7l')\r\n        .then(response => response.json())\r\n        .then(responseData => setData(responseData.data))\r\n        .catch(error => {\r\n            console.log('Error fetching and parsing data', error)\r\n          })\r\n    },[])\r\n    \r\n    //console.log(data)\r\n    \r\n    return(\r\n        <div className=\"main hide\">\r\n            <GifList data={data}/>    \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import Intro from './component/Intro'\nimport Header from './component/Header'\nimport Main from './component/Main'\n\nfunction App() {\n\n  return (\n    <div className=\"ok\">\n        <Intro />\n        <Header />\n        <Main />\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n;\n"],"sourceRoot":""}